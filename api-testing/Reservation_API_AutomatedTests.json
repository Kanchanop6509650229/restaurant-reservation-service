{
	"info": {
	  "_postman_id": "a7e5f0a2-8b4c-4c98-8f2e-b21b7c9e6c23",
	  "name": "Restaurant Reservation Service (Automated)",
	  "description": "Fully automated API tests for the Restaurant Reservation Platform microservices",
	  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
	  {
		"name": "Reservation Service",
		"item": [
		  {
			"name": "Restaurant Search APIs",
			"item": [
			  {
				"name": "Search Available Restaurants",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that restaurant search results are returned",
						"pm.test(\"Restaurant search results are returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  },
				  {
					"listen": "prerequest",
					"script": {
					  "exec": [
						"// Generate a future date for search (3 days from now at 7:00 PM)",
						"var futureDate = new Date();",
						"futureDate.setDate(futureDate.getDate() + 3);",
						"var searchDate = futureDate.toISOString().split('T')[0];",
						"",
						"// Store test data in environment",
						"pm.environment.set(\"search_date\", searchDate);"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"date\": \"{{search_date}}\",\n  \"time\": \"19:00:00\",\n  \"partySize\": 4,\n  \"cuisineType\": \"Italian\"\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/restaurants/search",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "restaurants",
					  "search"
					]
				  },
				  "description": "Search for available restaurants based on criteria"
				},
				"response": []
			  },
			  {
				"name": "Search Restaurant by ID",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that restaurant search results are returned",
						"pm.test(\"Restaurant search by ID returns correct result\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"    if (jsonData.data.length > 0) {",
						"        pm.expect(jsonData.data[0].id).to.equal(\"f47ac10b-58cc-4372-a567-0e02b2c3d479\");",
						"    }",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"restaurantId\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/restaurants/search",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "restaurants",
					  "search"
					]
				  },
				  "description": "Search for a restaurant by ID"
				},
				"response": []
			  },
			  {
				"name": "Search Restaurant by Name",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that restaurant search results are returned",
						"pm.test(\"Restaurant search by name returns correct results\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"    if (jsonData.data.length > 0) {",
						"        pm.expect(jsonData.data[0].name.toLowerCase()).to.include(\"restaurant\");",
						"    }",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"restaurantName\": \"Restaurant\"\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/restaurants/search",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "restaurants",
					  "search"
					]
				  },
				  "description": "Search for restaurants by name"
				},
				"response": []
			  }
			],
			"description": "Endpoints for searching and filtering restaurants"
		  },
		  {
			"name": "[WIP] Menu APIs",
			"item": [
			  {
				"name": "[WIP] 3.2.1 Get Restaurant Menu Categories",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu categories are returned",
						"pm.test(\"Menu categories are returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/menus/restaurants/{{restaurant_id}}/categories",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "menus",
					  "restaurants",
					  "{{restaurant_id}}",
					  "categories"
					]
				  },
				  "description": "Get all menu categories with their items for a specific restaurant"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Get Menu Category",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu category is returned",
						"pm.test(\"Menu category is returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data).to.have.property('name');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/menus/categories/{{category_id}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "menus",
					  "categories",
					  "{{category_id}}"
					]
				  },
				  "description": "Get a specific menu category with its items"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Get Restaurant Menu Items",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu items are returned",
						"pm.test(\"Menu items are returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/menus/restaurants/{{restaurant_id}}/items",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "menus",
					  "restaurants",
					  "{{restaurant_id}}",
					  "items"
					]
				  },
				  "description": "Get all menu items for a specific restaurant"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Get Menu Item",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu item is returned",
						"pm.test(\"Menu item is returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data).to.have.property('name');",
						"    pm.expect(jsonData.data).to.have.property('price');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/menus/items/{{menu_item_id}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "menus",
					  "items",
					  "{{menu_item_id}}"
					]
				  },
				  "description": "Get a specific menu item"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Search Menu Items",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu items are returned",
						"pm.test(\"Menu items search results are returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.be.an('array');",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/menus/restaurants/{{restaurant_id}}/search?query=pasta",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "menus",
					  "restaurants",
					  "{{restaurant_id}}",
					  "search"
					],
					"query": [
					  {
						"key": "query",
						"value": "pasta"
					  }
					]
				  },
				  "description": "Search for menu items by name or description"
				},
				"response": []
			  }
			],
			"description": "Endpoints for restaurant menu management and item retrieval"
		  },
		  {
			"name": "Reservation Management APIs",
			"item": [
			  {
				"name": "Create Reservation Without Menu",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 201\", function () {",
						"    pm.response.to.have.status(201);",
						"});",
						"",
						"// Test that reservation was created",
						"pm.test(\"Reservation created successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"    pm.expect(jsonData.data.status).to.eql(\"PENDING\");",
						"});",
						"",
						"// Test that no menu items are present",
						"pm.test(\"No menu items in reservation\", function () {",
						"    pm.expect(jsonData.data).to.have.property('menuItems');",
						"    pm.expect(jsonData.data.menuItems).to.be.an('array');",
						"    pm.expect(jsonData.data.menuItems.length).to.eql(0);",
						"});",
						"",
						"// Save reservation ID to environment",
						"if (jsonData.data && jsonData.data.id) {",
						"    pm.environment.set(\"reservation_id\", jsonData.data.id);",
						"    console.log(\"Reservation ID saved to environment: \" + jsonData.data.id);",
						"}"
					  ],
					  "type": "text/javascript"
					}
				  },
				  {
					"listen": "prerequest",
					"script": {
					  "exec": [
						"// Generate a future date for reservation (7 days from now at 7:00 PM)",
						"var futureDate = new Date();",
						"futureDate.setDate(futureDate.getDate() + 7);",
						"futureDate.setHours(19, 0, 0, 0);",
						"",
						"// Format as ISO string",
						"var reservationTime = futureDate.toISOString().split('.')[0];",
						"",
						"// Set a sample menu item ID for testing",
						"// In a real scenario, this would be retrieved from a previous API call",
						"var menuItemId = \"00000000-0000-0000-0000-000000000001\";",
						"",
						"// Store test data in environment",
						"pm.environment.set(\"reservation_time\", reservationTime);",
						"pm.environment.set(\"menu_item_id\", menuItemId);"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"restaurantId\": \"{{restaurant_id}}\",\n  \"reservationTime\": \"{{reservation_time}}\",\n  \"partySize\": 4,\n  \"durationMinutes\": 120,\n  \"customerName\": \"John Doe\",\n  \"customerPhone\": \"1234567890\",\n  \"customerEmail\": \"john@example.com\",\n  \"specialRequests\": \"Window seat preferred\",\n  \"remindersEnabled\": true\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations"
					]
				  },
				  "description": "Create a new reservation without menu items for the test restaurant"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Create Reservation With Menu",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 201\", function () {",
						"    pm.response.to.have.status(201);",
						"});",
						"",
						"// Test that reservation was created",
						"pm.test(\"Reservation created successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"    pm.expect(jsonData.data.status).to.eql(\"PENDING\");",
						"});",
						"",
						"// Test that menu items were added to the reservation",
						"pm.test(\"Menu items added to reservation\", function () {",
						"    pm.expect(jsonData.data).to.have.property('menuItems');",
						"    pm.expect(jsonData.data.menuItems).to.be.an('array');",
						"    pm.expect(jsonData.data.menuItems.length).to.be.at.least(1);",
						"    if (jsonData.data.menuItems.length > 0) {",
						"        pm.expect(jsonData.data.menuItems[0]).to.have.property('menuItemId');",
						"        pm.expect(jsonData.data.menuItems[0]).to.have.property('quantity');",
						"        pm.expect(jsonData.data.menuItems[0].quantity).to.eql(2);",
						"    }",
						"});",
						"",
						"// Save reservation ID to environment",
						"if (jsonData.data && jsonData.data.id) {",
						"    pm.environment.set(\"reservation_with_menu_id\", jsonData.data.id);",
						"    console.log(\"Reservation with menu ID saved to environment: \" + jsonData.data.id);",
						"}"
					  ],
					  "type": "text/javascript"
					}
				  },
				  {
					"listen": "prerequest",
					"script": {
					  "exec": [
						"// Generate a future date for reservation (7 days from now at 8:00 PM)",
						"var futureDate = new Date();",
						"futureDate.setDate(futureDate.getDate() + 7);",
						"futureDate.setHours(20, 0, 0, 0);",
						"",
						"// Format as ISO string",
						"var reservationTime = futureDate.toISOString().split('.')[0];",
						"",
						"// Set a sample menu item ID for testing",
						"// In a real scenario, this would be retrieved from a previous API call",
						"var menuItemId = \"00000000-0000-0000-0000-000000000001\";",
						"",
						"// Store test data in environment",
						"pm.environment.set(\"reservation_time_with_menu\", reservationTime);",
						"pm.environment.set(\"menu_item_id\", menuItemId);"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"restaurantId\": \"{{restaurant_id}}\",\n  \"reservationTime\": \"{{reservation_time_with_menu}}\",\n  \"partySize\": 3,\n  \"durationMinutes\": 90,\n  \"customerName\": \"Jane Smith\",\n  \"customerPhone\": \"9876543210\",\n  \"customerEmail\": \"jane@example.com\",\n  \"specialRequests\": \"Quiet table please\",\n  \"remindersEnabled\": true,\n  \"menuItems\": [\n    {\n      \"menuItemId\": \"{{menu_item_id}}\",\n      \"quantity\": 2,\n      \"specialInstructions\": \"No onions please\"\n    }\n  ]\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations"
					]
				  },
				  "description": "Create a new reservation with menu items for the test restaurant"
				},
				"response": []
			  },
			  {
				"name": "Get User Reservations",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservations are returned",
						"pm.test(\"User reservations are returned\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('content');",
						"    pm.expect(jsonData.data.content).to.be.an('array');",
						"    pm.expect(jsonData.data.content.length).to.be.at.least(2); // At least 2 reservations (with and without menu)",
						"});",
						"",
						"// Find our created reservation without menu",
						"pm.test(\"Reservation without menu is found\", function () {",
						"    var foundReservation = jsonData.data.content.find(function(reservation) {",
						"        return reservation.id === pm.environment.get(\"reservation_id\");",
						"    });",
						"    ",
						"    pm.expect(foundReservation).to.not.be.undefined;",
						"    pm.expect(foundReservation.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"    pm.expect(foundReservation.menuItems.length).to.eql(0);",
						"});",
						"",
						"// Find our created reservation with menu",
						"pm.test(\"Reservation with menu is found\", function () {",
						"    var foundReservation = jsonData.data.content.find(function(reservation) {",
						"        return reservation.id === pm.environment.get(\"reservation_with_menu_id\");",
						"    });",
						"    ",
						"    pm.expect(foundReservation).to.not.be.undefined;",
						"    pm.expect(foundReservation.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"    pm.expect(foundReservation.menuItems.length).to.be.at.least(1);",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					}
				  ],
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/user",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "user"
					]
				  },
				  "description": "Get reservations for the current user"
				},
				"response": []
			  },
			  {
				"name": "Get Reservation Without Menu",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservation data is correct",
						"pm.test(\"Reservation data is correct\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_id\"));",
						"    pm.expect(jsonData.data.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					}
				  ],
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_id}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_id}}"
					]
				  },
				  "description": "Get details of the created reservation"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Get Reservation With Menu",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservation data is correct",
						"pm.test(\"Reservation data is correct\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_with_menu_id\"));",
						"    pm.expect(jsonData.data.restaurantId).to.eql(pm.environment.get(\"restaurant_id\"));",
						"});",
						"",
						"// Test that menu items are present",
						"pm.test(\"Menu items are present in reservation\", function () {",
						"    pm.expect(jsonData.data).to.have.property('menuItems');",
						"    pm.expect(jsonData.data.menuItems).to.be.an('array');",
						"    pm.expect(jsonData.data.menuItems.length).to.be.at.least(1);",
						"    if (jsonData.data.menuItems.length > 0) {",
						"        pm.expect(jsonData.data.menuItems[0]).to.have.property('menuItemId');",
						"        pm.expect(jsonData.data.menuItems[0]).to.have.property('quantity');",
						"        pm.expect(jsonData.data.menuItems[0].quantity).to.eql(2);",
						"    }",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					}
				  ],
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_with_menu_id}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_with_menu_id}}"
					]
				  },
				  "description": "Get details of the reservation with menu items"
				},
				"response": []
			  },
			  {
				"name": "Confirm Reservation",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservation was confirmed",
						"pm.test(\"Reservation confirmed successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_id\"));",
						"    pm.expect(jsonData.data.status).to.eql(\"CONFIRMED\");",
						"});",
						"",
						"// Verify that the user ID in the response matches the authenticated user",
						"pm.test(\"Reservation was created by the authenticated user\", function () {",
						"    pm.expect(jsonData.data).to.have.property('userId');",
						"    pm.expect(jsonData.data.userId).to.eql(pm.environment.get(\"user_id\"));",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					}
				  ],
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_id}}/confirm",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_id}}",
					  "confirm"
					]
				  },
				  "description": "Confirm the pending reservation"
				},
				"response": []
			  },
			  {
				"name": "[WIP] Add Menu Items to Reservation",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that menu items were added successfully",
						"pm.test(\"Menu items added successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_id\"));",
						"    pm.expect(jsonData.data).to.have.property('menuItems');",
						"    pm.expect(jsonData.data.menuItems).to.be.an('array').that.is.not.empty;",
						"});",
						"",
						"// Test that the menu items have the correct properties",
						"pm.test(\"Menu items have correct properties\", function () {",
						"    const menuItems = jsonData.data.menuItems;",
						"    menuItems.forEach(function(item) {",
						"        pm.expect(item).to.have.property('menuItemId');",
						"        pm.expect(item).to.have.property('menuItemName');",
						"        pm.expect(item).to.have.property('quantity');",
						"        pm.expect(item).to.have.property('price');",
						"    });",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"menuItems\": [\n    {\n      \"menuItemId\": \"menu-item-1\",\n      \"quantity\": 2,\n      \"specialInstructions\": \"Extra spicy\"\n    },\n    {\n      \"menuItemId\": \"menu-item-2\",\n      \"quantity\": 1,\n      \"specialInstructions\": \"No onions\"\n    }\n  ]\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_id}}/menu-items",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_id}}",
					  "menu-items"
					]
				  },
				  "description": "Add menu items to an existing reservation"
				},
				"response": []
			  },
			  {
				"name": "Update Reservation",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservation was updated",
						"pm.test(\"Reservation updated successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_id\"));",
						"    pm.expect(jsonData.data.partySize).to.eql(5);",
						"    pm.expect(jsonData.data.specialRequests).to.eql(\"Updated special requests\");",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "PUT",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					},
					{
					  "key": "Content-Type",
					  "value": "application/json"
					}
				  ],
				  "body": {
					"mode": "raw",
					"raw": "{\n  \"partySize\": 5,\n  \"specialRequests\": \"Updated special requests\"\n}"
				  },
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_id}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_id}}"
					]
				  },
				  "description": "Update the reservation details"
				},
				"response": []
			  },
			  {
				"name": "Cancel Reservation",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"var jsonData = pm.response.json();",
						"",
						"// Test status code",
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"// Test that reservation was cancelled",
						"pm.test(\"Reservation cancelled successfully\", function () {",
						"    pm.expect(jsonData.success).to.be.true;",
						"    pm.expect(jsonData.data).to.have.property('id');",
						"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"reservation_id\"));",
						"    pm.expect(jsonData.data.status).to.eql(\"CANCELLED\");",
						"    pm.expect(jsonData.data.cancellationReason).to.eql(\"Changed plans\");",
						"});",
						"",
						"// Verify that the user ID in the response matches either the authenticated user or the restaurant owner",
						"pm.test(\"Reservation was cancelled by an authorized user\", function () {",
						"    pm.expect(jsonData.data).to.have.property('userId');",
						"    ",
						"    // Check if the user is the creator of the reservation",
						"    const isCreator = jsonData.data.userId === pm.environment.get(\"user_id\");",
						"    ",
						"    // In a real test, we would also check if the user is the restaurant owner",
						"    // For this test, we'll just verify the creator since that's what we're using",
						"    pm.expect(isCreator).to.be.true;",
						"});"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "POST",
				  "header": [
					{
					  "key": "Authorization",
					  "value": "Bearer {{auth_token}}"
					}
				  ],
				  "url": {
					"raw": "{{base_url_reservation}}/api/reservations/{{reservation_id}}/cancel?reason=Changed plans",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "reservations",
					  "{{reservation_id}}",
					  "cancel"
					],
					"query": [
					  {
						"key": "reason",
						"value": "Changed plans"
					  }
					]
				  },
				  "description": "Cancel the confirmed reservation"
				},
				"response": []
			  }
			],
			"description": "Endpoints for creating, retrieving, updating, and cancelling reservations"
		  },
		  {
			"name": "Schedule APIs",
			"item": [
			  {
				"name": "Get Restaurant Schedule",
				"event": [
				  {
					"listen": "test",
					"script": {
					  "exec": [
						"// Parse the response body",
						"try {",
						"    var jsonData = pm.response.json();",
						"    ",
						"    // Test status code",
						"    pm.test(\"Status code is 200\", function () {",
						"        pm.response.to.have.status(200);",
						"    });",
						"    ",
						"    // Test that schedule data is returned",
						"    pm.test(\"Schedule data is returned\", function () {",
						"        pm.expect(jsonData.success).to.be.true;",
						"        pm.expect(jsonData.data).to.be.an('array');",
						"        pm.expect(jsonData.data.length).to.be.at.least(1);",
						"    });",
						"} catch (e) {",
						"    console.error(\"Error parsing JSON: \" + e.message);",
						"    pm.test(\"Response should be valid JSON\", function() {",
						"        pm.expect.fail(\"Invalid JSON response: \" + e.message);",
						"    });",
						"}"
					  ],
					  "type": "text/javascript"
					}
				  },
				  {
					"listen": "prerequest",
					"script": {
					  "exec": [
						"// Generate start date (beginning of current month)",
						"var startDate = new Date();",
						"startDate.setDate(1);",
						"var startDateStr = startDate.toISOString().split('T')[0];",
						"",
						"// Generate end date (end of current month)",
						"var endDate = new Date(startDate);",
						"endDate.setMonth(endDate.getMonth() + 1);",
						"endDate.setDate(0);",
						"var endDateStr = endDate.toISOString().split('T')[0];",
						"",
						"// Store in environment",
						"pm.environment.set(\"schedule_start_date\", startDateStr);",
						"pm.environment.set(\"schedule_end_date\", endDateStr);"
					  ],
					  "type": "text/javascript"
					}
				  }
				],
				"request": {
				  "method": "GET",
				  "header": [],
				  "url": {
					"raw": "{{base_url_reservation}}/api/schedules/restaurant/{{restaurant_id}}?startDate={{schedule_start_date}}&endDate={{schedule_end_date}}",
					"host": [
					  "{{base_url_reservation}}"
					],
					"path": [
					  "api",
					  "schedules",
					  "restaurant",
					  "{{restaurant_id}}"
					],
					"query": [
					  {
						"key": "startDate",
						"value": "{{schedule_start_date}}"
					  },
					  {
						"key": "endDate",
						"value": "{{schedule_end_date}}"
					  }
					]
				  },
				  "description": "Get schedule for the restaurant within the current month"
				},
				"response": []
			  }
			],
			"description": "Endpoints for viewing and managing restaurant schedules"
		  }
		],
		"description": "Endpoints for reservation management, restaurant search, menu management, and scheduling",
		"event": [
		  {
			"listen": "prerequest",
			"script": {
			  "type": "text/javascript",
			  "exec": [
				""
			  ]
			}
		  },
		  {
			"listen": "test",
			"script": {
			  "type": "text/javascript",
			  "exec": [
				""
			  ]
			}
		  }
		]
	  }
	],
	"event": [
	  {
		"listen": "prerequest",
		"script": {
		  "type": "text/javascript",
		  "exec": [
			"// Global pre-request script",
			"// Check if required environment variables are set",
			"const requiredVars = ['base_url_user', 'base_url_restaurant', 'base_url_reservation'];",
			"const missingVars = [];",
			"",
			"requiredVars.forEach(function(variable) {",
			"    if (!pm.environment.get(variable)) {",
			"        missingVars.push(variable);",
			"    }",
			"});",
			"",
			"if (missingVars.length > 0) {",
			"    console.error('Missing required environment variables: ' + missingVars.join(', '));",
			"    console.log('Please set these variables in your environment before running the collection.');",
			"}"
		  ]
		}
	  },
	  {
		"listen": "test",
		"script": {
		  "type": "text/javascript",
		  "exec": [
			"// Global test script",
			"// Log response time for every request",
			"console.log(\"Response time: \" + pm.response.responseTime + \" ms\");"
		  ]
		}
	  }
	]
  }