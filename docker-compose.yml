# Restaurant Platform Infrastructure Configuration
# This docker-compose file defines the infrastructure services for the restaurant reservation platform
# Author: Restaurant Team
# Version: 1.0

version: '3.8'

services:
  # Zookeeper service
  # Required for Kafka cluster coordination and management
  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"  # Standard Zookeeper port
    environment:
      ZOO_MY_ID: 1  # Unique ID for this Zookeeper instance
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181  # Cluster configuration
    volumes:
      - zookeeper-data:/data  # Persistent storage for Zookeeper data
      - zookeeper-log:/datalog  # Persistent storage for Zookeeper logs
    networks:
      - restaurant-platform-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]  # Check if Zookeeper is listening
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka service
  # Message broker for event-driven communication between services
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy  # Wait for Zookeeper to be healthy
    ports:
      - "9092:9092"  # Internal Docker network port
      - "29092:29092"  # External host machine port
    environment:
      KAFKA_BROKER_ID: 1  # Unique ID for this Kafka broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Zookeeper connection string
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092  # Listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT  # Security protocol mapping
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT  # Internal broker communication
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Replication factor for offset topic
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # Consumer group rebalance delay
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1  # Minimum in-sync replicas for transactions
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1  # Replication factor for transaction logs
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Enable automatic topic creation
    volumes:
      - kafka-data:/var/lib/kafka/data  # Persistent storage for Kafka data
      - ${PWD}/config/kafka:/etc/kafka/custom-config  # Custom Kafka configuration
    networks:
      - restaurant-platform-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]  # Check if Kafka is operational
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafdrop - Kafka UI
  # Web-based UI for monitoring and managing Kafka topics
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"  # Web UI port
    environment:
      KAFKA_BROKERCONNECT: kafka:9092  # Kafka broker connection string
      JVM_OPTS: "-Xms32M -Xmx64M"  # JVM memory settings
      SERVER_SERVLET_CONTEXTPATH: "/"  # Web context path
    depends_on:
      kafka:
        condition: service_healthy  # Wait for Kafka to be healthy
    networks:
      - restaurant-platform-network

  # MySQL for Reservation Service
  # Database for reservation management
  mysql-reservation-service:
    image: mysql:8.0
    container_name: mysql-reservation-service
    restart: always
    ports:
      - "3308:3306"  # Alternative port for third MySQL instance
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: reservation_service
      MYSQL_USER: reservation_service
      MYSQL_PASSWORD: reservation_password
    volumes:
      - mysql-reservation-data:/var/lib/mysql
      - ${PWD}/scripts/mysql/init-reservation-db.sql:/docker-entrypoint-initdb.d/init-reservation-db.sql
    networks:
      - restaurant-platform-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Topic Initialize Tool
  # Container for initializing Kafka topics
  kafka-init:
    build:
      context: ./scripts
      dockerfile: Dockerfile.kafka-init
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy  # Wait for Kafka to be healthy
    volumes:
      - ${PWD}/scripts/init-kafka.sh:/scripts/init-kafka.sh  # Initialization script
    command: ["bash", "/scripts/init-kafka.sh"]  # Run initialization script
    networks:
      - restaurant-platform-network

  # Optional services for local development and testing
  # Uncomment these when needed

  # Reservation Service
  reservation-service:
    build: .
    container_name: reservation-service
    restart: always
    depends_on:
      - kafka
      - mysql-reservation-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-reservation-service:3306/reservation_service
      SPRING_DATASOURCE_USERNAME: reservation_service
      SPRING_DATASOURCE_PASSWORD: reservation_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - restaurant-platform-network

# Volume definitions for persistent data storage
volumes:
  zookeeper-data:  # Zookeeper data volume
  zookeeper-log:   # Zookeeper log volume
  kafka-data:      # Kafka data volume
  mysql-reservation-data: # Reservation service database volume

# Network configuration
networks:
  restaurant-platform-network:
    driver: bridge  # Bridge network for inter-container communication